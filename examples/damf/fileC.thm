Kind nat type.
Type z nat.
Type s nat -> nat.

Define nat : nat -> prop by
; nat z
; nat (s X) := nat X.

Define plus : nat -> nat -> nat -> prop by
; plus z N N
; plus (s M) N (s K) := plus M N K.

Import "damf:bafyreibby73a42xrrmg4quqbta6ezj36f5zky63y65ee7ieose535t2l7u" as
Theorem lol : forall (x : nat), nat (s x) -> nat x.

Theorem blah : true.
apply lol to _ with x = z.
search.
