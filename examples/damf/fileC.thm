Kind nat type.
Type z nat.
Type s nat -> nat.

Define nat : nat -> prop by
; nat z
; nat (s X) := nat X.

Define plus : nat -> nat -> nat -> prop by
; plus z N N
; plus (s M) N (s K) := plus M N K.

Import "damf:bafyreidbq2olskbt2fmyw7igota7rqcavyi2e7dzhpjjo3oser2hhlelwa"
as lol : forall (x : nat), nat (s x) -> nat x.

Theorem blah : true.
apply lol to _ with x = z.
search.
